Что такое рекурсия? 1. Передача функции в качестве аргумента другой функции 2. Вызов функции из неё же самой 3. Создание объектов внутри функции 4. Определение функции внутри другой функции Ответ: 2
Что такое базовый случай? 1. Случай, когда рекурсивная функция не вызывает саму себя 2. Случай, когда рекурсивная функция вызывает другую функцию 3. Случай, когда рекурсивная функция вызывает саму себя 4. Случай, когда рекурсивная функция возвращает значение Ответ: 1
Как называется функция, которая вызывает саму себя? 1. Рекурсивная функция 2. Итеративная функция 3. Функция-переключатель 4. Функция-контроллер Ответ: 1
Какое ограничение существует при использовании рекурсии? 1. Необходимость использования дополнительной оперативной памяти 2. Ограничение максимальной глубины рекурсии 3. Необходимость увеличения скорости процессора 4. Ограничение максимального количества вызовов функции Ответ: 2
В каком случае следует использовать рекурсию? 1. Когда требуется повторное использование кода 2. Когда удобнее использовать циклы 3. Когда требуется обработка древовидных структур 4. Когда требуется параллельное выполнение кода Ответ: 3
Что такое стек вызовов? 1. Список всех вызовов функций программы 2. Список всех переменных программы 3. Список всех объектов программы 4. Список всех операторов программы Ответ: 1
Какой оператор нужно использовать для остановки рекурсии? 1. continue 2. return 3. break 4. goto Ответ: 2
Что произойдет, если рекурсивная функция не имеет базового случая? 1. Программа завершится с ошибкой 2. Рекурсивная функция будет вызываться бесконечно 3. Рекурсивная функция не будет вызвана 4. Рекурсивную функцию необходимо переписать в циклическую Ответ: 2
Каким способом можно разбить задачу на более мелкие с использованием рекурсии? 1. Использованием глобальной переменной 2. Использованием циклов 3. Использованием условных операторов 4. Вызовом рекурсивных функций Ответ: 4
Какой тип функции должен быть, чтобы она могла вызывать саму себя? 1. char 2. void 3. int 4. любой Ответ: 4
Каким способом можно определить, что функция была вызвана из себя самой? 1. С помощью оператора sizeof 2. С помощью аргументов функции 3. С помощью проверки имени функции 4. С помощью стека вызовов Ответ: 3
Остаток стека вызовов после завершения рекурсивной функции будет содержать: 1. Все локальные переменные 2. Все глобальные переменные 3. Все статические переменные 4. Никаких переменных Ответ: 1
Какой будет результат выполнения следующего кода: int factorial(int n) { if (n == 0) return 1; else return n * factorial(n - 1); } int main() { cout << factorial(5); } 1. 120 2. 25 3. 720 4. 5 Ответ: 3
Что произойдет, если передать отрицательный аргумент в функцию, реализующую факториал с помощью рекурсии? 1. Программа завершится с ошибкой 2. Функция вернет отрицательное значение 3. Функция будет бесконечно вызывать саму себя 4. Функция вернет нулевое значение Ответ: 3
Как называется рекурсивный алгоритм, который разделяет список на две половины и затем сортирует каждую часть по отдельности, а затем объединяет две отсортированные части в один список? 1. Бинарный поиск 2. Сортировка слиянием 3. Сортировка вставками 4. Сортировка пузырьком Ответ: 2
Что такое рекурсивное дерево? 1. Дерево, состоящее из элементов одинакового типа 2. Дерево, где каждый узел имеет несколько потомков 3. Дерево, состоящее только из одного узла 4. Обычное бинарное дерево Ответ: 2
Как называется рекурсивная функция, которая обходит все узлы дерева? 1. traverse 2. recursion 3. iterator 4. enumerator Ответ: 1
Каким образом рекурсивная функция может обойти дерево в глубину? 1. Сначала посетить корень, затем обойти левое и правое поддерево 2. Сначала обойти левое и правое поддерево, затем посетить корень 3. Обойти только левое поддерево 4. Обойти только правое поддерево Ответ: 2
Какой алгоритм обхода дерева по уровням можно реализовать с помощью рекурсии? 1. DFS 2. BFS 3. DLS 4. IDS Ответ: 2
Какой тип данных можно использовать для представления ребра в рекурсивном дереве? 1. bool 2. char 3. int 4. struct Ответ: 4
Что такое хвостовая рекурсия? 1. Рекурсия, где функция вызывает саму себя внутри своего тела 2. Рекурсия, где последняя операция функции является вызовом самой себя 3. Рекурсия, где функция вызывает другую функцию внутри своего тела 4. Рекурсия, где функция возвращает результат вызова самой себя Ответ: 2
Каким образом можно оптимизировать рекурсивную функцию с хвостовой рекурсией? 1. Применить динамическое программирование 2. Заменить рекурсивный вызов на итеративный с использованием цикла 3. Использовать многопоточность для параллельного выполнения 4. Обернуть рекурсивный вызов в try-catch блок Ответ: 2
Какой будет результат выполнения следующего кода: int fib(int n) { if (n <= 1) { return n; } else { return fib(n-1) + fib(n-2); } } int main() { cout << fib(6); } 1. 6 2. 13 3. 8 4. 3 Ответ: 3
Что такое базовый случай в рекурсии? 1. Самый первый вызов функции 2. Вызов функции самой себя 3. Выход из рекурсии при достижении определенного условия 4. Передача аргументов функции из одного вызова в другой Ответ: 3
Что произойдет, если не установить базовый случай в рекурсии? 1. Программа завершится с ошибкой 2. Функция будет бесконечно вызывать саму себя 3. Функция не будет работать с определенными значениями аргументов 4. Функция вернет нулевое значение Ответ: 2
Какой способ позволяет ускорить работу рекурсивной функции, кроме использования хвостовой рекурсии и динамического программирования? 1. Использование многопоточности 2. Использование цикла вместо рекурсии 3. Использование указателей на функции вместо прямых вызовов 4. Использование готовых библиотечных функций Ответ: 2
Какой будет результат выполнения следующего кода: int pow(int x, int n) { if (n == 0) { return 1; } else if (n % 2 == 0) { int y = pow(x, n/2); return y*y; } else { return x * pow(x, n-1); } } int main() { cout << pow(2, 5); } 1. 10 2. 25 3. 32 4. 2 Ответ: 4
Каким способом можно предотвратить переполнение стека вызовов при использовании рекурсии? 1. Увеличить максимальную глубину рекурсии 2. Оптимизировать код функции 3. Использовать циклы вместо рекурсии 4. Использовать динамическое выделение памяти Ответ: 3
Что такое хвостовая рекурсия? 1. Рекурсия с только одним вызовом функции 2. Рекурсия с вызовом функции в самом конце функции 3. Рекурсия с вызовом функции в самом начале функции 4. Рекурсивная функция, которая никогда не вызывает саму себя Ответ: 2
Какое преимущество может дать использование хвостовой рекурсии? 1. Ускорение выполнения программы 2. Уменьшение использования оперативной памяти 3. Увеличение глубины рекурсии 4. Улучшение читабельности кода Ответ: 2